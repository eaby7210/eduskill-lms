"""
Django settings for eduskill project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta
from urllib.parse import urlparse
import environ
import os
from pathlib import Path


env = environ.Env()

BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


SECRET_KEY = \
    'django-insecure-+7cnx-ssy5z9==&zcvhxcz=o5#7q70oit-rr@na(a0jlo*m9vd'
DEBUG = True

ALLOWED_HOSTS = ["localhost",
                 "127.0.0.1", "http://localhost:8000",
                 "eduskill.fun", "www.eduskill.fun"]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://eduskill.fun", "https://www.eduskill.fun",
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'https://eduskill.fun',
    'https://www.eduskill.fun',
]


# CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # installed apps
    'rest_framework.authtoken',
    'rest_framework',
    'django_filters',
    'dj_rest_auth',
    'ordered_model',
    'dj_rest_auth.registration',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'channels',
    'storages',
    # myapps
    'core',
    'students',
    'tutor',
    # 'myadmin',
]

MIDDLEWARE = [
    # intstalled middleware
    "corsheaders.middleware.CorsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    # django middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eduskill.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # extra templates
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'eduskill.wsgi.application'
ASGI_APPLICATION = "eduskill.asgi.application"


tmpPostgres = urlparse(env("DATABASE_URL"))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': tmpPostgres.path.replace('/', ''),
        'USER': tmpPostgres.username,
        'PASSWORD': tmpPostgres.password,
        'HOST': tmpPostgres.hostname,
        'PORT': 5432,
    }
}


AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation\
    #         .UserAttributeSimilarityValidator',
    # },
    {
        'NAME':
            'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=5),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

REST_AUTH = {
    'USE_JWT': True,
    'SESSION_LOGIN': False,
    # 'JWT_AUTH_COOKIE': 'access_token',
    # 'JWT_AUTH_COOKIE_USE_CSRF': True,
    # 'JWT_AUTH_REFRESH_COOKIE': 'refresh_token',
    'PASSWORD_CHANGE_SERIALIZER':
        'core.serializers.CustomPasswordChangeSeralizer',
    'REGISTER_SERIALIZER': 'core.serializers.UserRegisterSerializer',
    'USER_DETAILS_SERIALIZER': 'core.serializers.UserSerializer',
    'LOGOUT_ON_PASSWORD_CHANGE': True,


}


CSRF_COOKIE_NAME = "csrftoken"
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'EXTRA_DATA': [
            ('email', 'email'),
            ('picture', 'image'),
        ],
    }
}

ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_EMAIL_REQUIRED = True

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

SITE_ID = 1

# AWS Settings
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME')
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_EXPIRE = 2700
AWS_DEFAULT_ACL = None

# PEM_FILE_PATH = os.path.join(BASE_DIR, 'cf_secretkey.pem')

# with open(PEM_FILE_PATH, 'rb') as pem_file:
#     AWS_CLOUDFRONT_KEY_PEM = pem_file.read()

# AWS_CLOUDFRONT_KEY_ID = env('AWS_CLOUDFRONT_KEY_ID')
# # AWS_CLOUDFRONT_KEY = AWS_CLOUDFRONT_KEY_PEM
# AWS_CLOUDFRONT_KEY = env.str(
#     'AWS_CLOUDFRONT_KEY',
#     multiline=True
# ).encode('ascii')
# print(AWS_CLOUDFRONT_KEY)
# AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN')

# Media files
STORAGES = {
    'default': {
        'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
        'OPTIONS': {
            'bucket_name': AWS_STORAGE_BUCKET_NAME,
            'location': 'media',
        },
    },
    'staticfiles': {
        'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
        'OPTIONS': {
            'bucket_name': AWS_STORAGE_BUCKET_NAME,
            'location': 'static',
        },
    },
}
MEDIA_URL = "/media/"
STATIC_URL = "/static/"


AUTH_USER_MODEL = 'core.User'

ACCOUNT_ADAPTER = 'core.adapter.CustomAccountAdapter'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# Razorpay
RAZORPAY_KEY_ID = env('RAZORPAY_ID')
RAZORPAY_SECRET_KEY = env('RAZORPAY_ACCOUNT_ID')

# redis m broker
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# Redis for channel layer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}

# Logging Configuration for Docker and Production

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },

    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'null': {
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['console'],
        #     'level': 'INFO',
        #     'propagate': True,
        # },
        # 'channels': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        'tutor': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'core.consumers': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'core.middleware': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'students.consumers': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'boto3': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False,
        },
        'botocore': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False,
        },
        'urllib3': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False,
        },
        's3transfer': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': False,
        },
        # '': {  # Root logger
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        # },
    },
}
